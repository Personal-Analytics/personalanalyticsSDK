/**
 * IBM Personal Analytics - Services API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class DefaultApi {
    protected basePath = 'http://localhost/api';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * Creates a new &#x60;channel&#x60;.
     * @param channel Channel to add
     */
    public addChannel (channel: models.Channel, extraHttpRequestParams?: any ) : Observable<models.Channel> {
        const path = this.basePath + '/channels';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'channel' is not null or undefined
        if (channel === null || channel === undefined) {
            throw new Error('Required parameter channel was null or undefined when calling addChannel.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(channel);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Creates a new &#x60;user&#x60;.  Id must be unique
     * @param user user to add
     */
    public addUser (user: models.User, extraHttpRequestParams?: any ) : Observable<models.User> {
        const path = this.basePath + '/users';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling addUser.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(user);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * deletes a single channel based on the ID supplied
     * @param id ID of channel to delete
     */
    public deleteChannel (id: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/channels/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteChannel.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * deletes a single user based on the ID supplied
     * @param id ID of user to delete
     */
    public deleteUser (id: string, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/users/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteUser.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * modifies a channel based on its ID
     * @param id ID of channel to fetch
     * @param channel Channel with updated values
     */
    public editChannelById (id: string, channel: models.Channel, extraHttpRequestParams?: any ) : Observable<models.Channel> {
        const path = this.basePath + '/channels/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling editChannelById.');
        }
        // verify required parameter 'channel' is not null or undefined
        if (channel === null || channel === undefined) {
            throw new Error('Required parameter channel was null or undefined when calling editChannelById.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(channel);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * modifies a user based on its ID
     * @param id ID of user to fetch
     * @param user User with updated values
     */
    public editUserById (id: string, user: models.User, extraHttpRequestParams?: any ) : Observable<models.User> {
        const path = this.basePath + '/users/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling editUserById.');
        }
        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling editUserById.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(user);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Returns a channel based on a single ID
     * @param id ID of channel to fetch
     */
    public findChannelById (id: string, extraHttpRequestParams?: any ) : Observable<models.Channel> {
        const path = this.basePath + '/channels/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findChannelById.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Returns a user based on a single ID
     * @param id ID of user to fetch
     */
    public findUserById (id: string, extraHttpRequestParams?: any ) : Observable<models.User> {
        const path = this.basePath + '/users/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findUserById.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Gets &#x60;channel&#x60; objects. Optional query param of **limit** determines size of returned array 
     * @param limit maximum number of results to return
     * @param page page number (defaults to first)
     */
    public listChannels (limit?: number, page?: number, extraHttpRequestParams?: any ) : Observable<Array<models.Channel>> {
        const path = this.basePath + '/channels';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (limit !== undefined) {
            queryParameters.set('limit', String(limit));
        }

        if (page !== undefined) {
            queryParameters.set('page', String(page));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Gets channel objects that are associated with tags that are passed in
     * @param tags tags to search for
     */
    public listChannelsByTags (tags: Array<string>, extraHttpRequestParams?: any ) : Observable<Array<models.Channel>> {
        const path = this.basePath + '/channels/tags/{tags}'
            .replace('{' + 'tags' + '}', String(tags));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'tags' is not null or undefined
        if (tags === null || tags === undefined) {
            throw new Error('Required parameter tags was null or undefined when calling listChannelsByTags.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Gets channel objects that are owned by the user whose id is passed in in
     * @param id user whose channels to return
     */
    public listChannelsOwnedByUser (id: string, extraHttpRequestParams?: any ) : Observable<Array<models.Channel>> {
        const path = this.basePath + '/channels/user/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listChannelsOwnedByUser.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Returns the set of distinct tags that are defined in all channels
     */
    public listTags (extraHttpRequestParams?: any ) : Observable<Array<string>> {
        const path = this.basePath + '/tags';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Gets &#x60;user&#x60; objects. Optional query param of **limit** determines size of returned array 
     * @param limit maximum number of results to return
     * @param page page number (defaults to first)
     */
    public listUsers (limit?: number, page?: number, extraHttpRequestParams?: any ) : Observable<Array<models.User>> {
        const path = this.basePath + '/users';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (limit !== undefined) {
            queryParameters.set('limit', String(limit));
        }

        if (page !== undefined) {
            queryParameters.set('page', String(page));
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
